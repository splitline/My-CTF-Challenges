792: sys
793: implementation
794: cache_tag
795: NotImplementedError
796: _os
797: fspath
798: _path_split
799: pycache_prefix
800: rstrip
801: path_separators
802: startswith
803: path_sep
804: len
805: _PYCACHE
806: ValueError
807: count
808: rsplit
809: _OPT
810: isalnum
811: partition
812: _path_join
813: SOURCE_SUFFIXES
855: :/
932: rpartition
933: _path_stat
934: path
935: _os
936: getcwd
937: st_mtime
938: OSError
939: _path_mtime
940: _fill_cache
941: _relax_case
942: _relaxed_path_cache
943: lower
944: _path_cache
945: _path_join
946: _loaders
947: _path_isfile
948: _get_spec
949: _path_isdir
950: ValueError
951: _bootstrap
952: _verbose_message
953: ModuleSpec
954: submodule_search_locations
988: Setup the path-based importers for importlib by importing needed
    built-in modules and injecting them into the global namespace.

    Other components are extracted from the core bootstrap module.

    
989: posix
990: /
991: nt
992: \
994: _setup.<locals>.<genexpr>
996: importlib requires posix or nt
997: _os
998: path_sep
999: path_separators
1001: _pathseps_with_colon
1003: _setup.<locals>.<setcomp>
1005: winreg
1006: _relax_case
1007: .pyw
1008: _d.pyd
1664: real
1680: imag
1696: numerator
1712: denominator
2048: __ne__
2058: __gt__
2068: __ge__
2078: __init__
2098: __class_getitem__
2128: __repr__
2138: __call__
2148: __str__
2158: __getattribute__
2168: __setattr__
2178: __delattr__
2188: __lt__
2198: __le__
2208: __eq__
2218: __ne__
2228: __gt__
2238: __ge__
2248: __iter__
2258: __next__
2268: __add__
2278: __radd__
2288: __sub__
2298: __rsub__
2308: __mul__
2318: __rmul__
2328: __mod__
2338: __rmod__
2348: __divmod__
2358: __rdivmod__
2368: __pow__
2378: __rpow__
2388: __neg__
2398: __pos__
2408: __abs__
2418: __bool__
2428: __invert__
2438: __lshift__
2448: __rlshift__
2458: __rshift__
2468: __rrshift__
2478: __and__
2488: __rand__
2498: __xor__
2508: __rxor__
2518: __or__
2528: __ror__
2538: __int__
2560: __float__
2570: __iadd__
2580: __isub__
2584: __le__
2590: __imul__
2600: __imod__
2610: __ipow__
2620: __ilshift__
2630: __irshift__
2640: __iand__
2650: __ixor__
2660: __ior__
2670: __floordiv__
2680: __rfloordiv__
2690: __truediv__
2700: __rtruediv__
2710: __ifloordiv__
2720: __itruediv__
2730: __index__
2740: __matmul__
2750: __rmatmul__
2760: __imatmul__
2770: __len__
2780: __getitem__
2790: __setitem__
2800: __delitem__
2810: __contains__
2830: __repr__
2840: __str__
2850: __getattribute__
2860: __setattr__
2870: __delattr__
2880: __lt__
2890: __le__
2900: __eq__
2910: __ne__
2920: __gt__
2930: __ge__
2940: __iter__
2950: __next__
2960: __add__
2970: __radd__
2980: __sub__
2990: __rsub__
3000: __mul__
3010: __rmul__
3020: __mod__
3030: __rmod__
3040: __divmod__
3050: __rdivmod__
3072: __pow__
3082: __rpow__
3092: __neg__
3096: __eq__
3102: __pos__
3112: __abs__
3122: __bool__
3132: __invert__
3142: __lshift__
3152: __rlshift__
3162: __rshift__
3172: __rrshift__
3182: __and__
3192: __rand__
3202: __xor__
3212: __rxor__
3222: __or__
3232: __ror__
3242: __int__
3252: __float__
3262: __iadd__
3272: __isub__
3282: __imul__
3292: __imod__
3302: __ipow__
3312: __ilshift__
3322: __irshift__
3332: __iand__
3342: __ixor__
3352: __ior__
3362: __floordiv__
3372: __rfloordiv__
3382: __truediv__
3392: __rtruediv__
3402: __ifloordiv__
3412: __itruediv__
3422: __index__
3432: __matmul__
3442: __rmatmul__
3452: __imatmul__
3462: __len__
3472: __getitem__
3482: __setitem__
3492: __delitem__
3502: __contains__
3512: __bytes__
3522: __reversed__
3542: __repr__
3552: __hash__
3562: __getattribute__
3584: __lt__
3594: __le__
3604: __eq__
3614: __ne__
3624: __gt__
3634: __ge__
3644: __add__
3654: __radd__
3664: __sub__
3674: __rsub__
3684: __mul__
3694: __rmul__
3704: __mod__
3714: __rmod__
3724: __divmod__
3734: __rdivmod__
3744: __pow__
3754: __rpow__
3764: __neg__
3774: __pos__
3784: __abs__
3794: __bool__
3804: __invert__
3814: __lshift__
3824: __rlshift__
3834: __rshift__
3844: __rrshift__
3854: __and__
3864: __rand__
3874: __xor__
3884: __rxor__
3894: __or__
3904: __ror__
3914: __int__
3924: __float__
3934: __floordiv__
3944: __rfloordiv__
3954: __truediv__
3964: __rtruediv__
3974: __index__
3994: conjugate
4004: bit_length
4014: to_bytes
4024: from_bytes
4034: as_integer_ratio
4054: __trunc__
4064: __floor__
4074: __ceil__
4096: __round__
4106: __getnewargs__
4116: __format__
4120: __gt__
4126: __sizeof__
4146: __repr__
4156: __and__
4166: __rand__
4176: __xor__
4186: __rxor__
4196: __or__
4206: __ror__
4236: __repr__
4246: __str__
4256: __getattribute__
4266: __lt__
4276: __le__
4286: __eq__
4296: __ne__
4306: __gt__
4316: __ge__
4326: __iter__
4336: __init__
4346: __mod__
4356: __rmod__
4366: __len__
4376: __getitem__
4386: __setitem__
4396: __delitem__
4406: __add__
4416: __mul__
4426: __rmul__
4436: __contains__
4446: __iadd__
4456: __imul__
4476: __alloc__
4486: __reduce__
4496: __reduce_ex__
4506: __sizeof__
4516: append
4526: capitalize
4536: center
4546: clear
4556: copy
4566: count
4576: decode
4586: endswith
4611: __repr__
4614: __and__
4617: __rand__
4620: __xor__
4623: __rxor__
4626: __or__
4629: __ror__
4632: __new__
4635: __doc__
4636: bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.
4649: __repr__
4652: __getattribute__
4655: __get__
4658: __init__
4661: __new__
4664: __thisclass__
4667: __self__
4670: __self_class__
4673: __doc__
4674: super() -> same as super(__class__, <first argument>)
super(type) -> unbound super object
super(type, obj) -> bound super object; requires isinstance(obj, type)
super(type, type2) -> bound super object; requires issubclass(type2, type)
Typical use to call a cooperative superclass method:
class C(B):
    def meth(self, arg):
        super().meth(arg)
This works for class methods too:
class C(B):
    @classmethod
    def cmeth(cls, arg):
        super().cmeth(arg)

4687: __getattribute__
4690: __new__
4693: __dir__
4696: tb_frame
4699: tb_lasti
4702: tb_lineno
4705: tb_next
4708: __doc__
4709: TracebackType(tb_next, tb_frame, tb_lasti, tb_lineno)
--

Create a new traceback object.
4725: __repr__
4728: __getattribute__
4731: __iter__
4734: __len__
4737: __reversed__
4740: __doc__
4763: __get__
4766: __init__
4769: __new__
4772: __func__
4775: __isabstractmethod__
4778: __dict__
4781: __doc__
4782: staticmethod(function) -> method

Convert a function to be a static method.

A static method does not receive an implicit first argument.
To declare a static method, use this idiom:

     class C:
         @staticmethod
         def f(arg1, arg2, ...):
             ...

It can be called either on the class (e.g. C.f()) or on an instance
(e.g. C().f()). Both the class and the instance are ignored, and
neither is passed implicitly as the first argument to the method.

Static methods in Python are similar to those found in Java or C++.
For a more advanced concept, see the classmethod builtin.
4801: __getattribute__
4804: __iter__
4807: __next__
4810: __new__
4813: __reduce__
4816: __class_getitem__
4819: __doc__
4820: Return an enumerate object.

  iterable
    an object supporting iteration

The enumerate object yields pairs containing a count (from start, which
defaults to zero) and a value yielded by the iterable argument.

enumerate is useful for obtaining an indexed list:
    (0, seq[0]), (1, seq[1]), (2, seq[2]), ...
4839: __getattribute__
4842: __iter__
4845: __next__
4848: __new__
4851: __length_hint__
4854: __reduce__
4857: __setstate__
4860: __doc__
4861: Return a reverse iterator over the values of the given sequence.
4877: __repr__
4880: __getattribute__
4883: __get__
4886: __set__
4889: __delete__
4892: __objclass__
4895: __name__
4898: __doc__
4901: __qualname__
4915: __repr__
4918: __call__
4921: __getattribute__
4924: __get__
4927: __reduce__
4930: __objclass__
4933: __name__
4936: __doc__
4939: __qualname__
4942: __text_signature__
4953: __repr__
4956: __getattribute__
4959: __get__
4962: __set__
4965: __delete__
4968: __reduce__
4971: __objclass__
4974: __name__
4977: __doc__
4980: __qualname__
4991: __getattribute__
4994: __iter__
4997: __next__
5000: __length_hint__
5003: __reduce__
5006: __setstate__
5009: __doc__
5029: __repr__
5032: __call__
5035: __getattribute__
5038: __get__
5041: __reduce__
5044: __objclass__
5047: __name__
5050: __doc__
5053: __qualname__
5056: __text_signature__
5067: __repr__
5070: __call__
5073: __getattribute__
5076: __get__
5079: __reduce__
5082: __objclass__
5085: __name__
5088: __doc__
5091: __qualname__
5094: __text_signature__
5290: _warnings
5291: warn
5292: DeprecationWarning
5293: TypeError
5294: _os
5295: fspath
5296: _path_split
5297: rpartition
5298: sys
5299: implementation
5300: cache_tag
5301: NotImplementedError
5302: join
5303: flags
5304: optimize
5305: str
5306: isalnum
5307: ValueError
5308: format
5309: _OPT
5310: BYTECODE_SUFFIXES
5311: pycache_prefix
5312: _path_isabs
5313: _path_join
5314: getcwd
5315: path_separators
5316: lstrip
5317: _PYCACHE
5632: expandtabs
5642: extend
5652: find
5662: fromhex
5672: hex
5682: index
5692: insert
5702: isalnum
5712: isalpha
5722: isascii
5732: isdigit
5742: islower
5752: isspace
5762: istitle
5772: isupper
5782: join
5792: ljust
5802: lower
5812: lstrip
5832: partition
5842: pop
5852: remove
5862: replace
5872: removeprefix
5882: removesuffix
5892: reverse
5902: rfind
5912: rindex
5922: rjust
5932: rpartition
5942: rsplit
5952: rstrip
5962: split
5972: splitlines
5982: startswith
5992: strip
6002: swapcase
6012: title
6022: translate
6032: upper
6042: zfill
6062: __repr__
6072: __hash__
6082: __str__
6092: __getattribute__
6102: __lt__
6112: __le__
6122: __eq__
6376: tb_frame
6392: tb_lasti
6408: tb_lineno
6424: tb_next
6456: __thisclass__
6472: __self__
6488: __self_class__
6520: start
6536: stop
6552: step
6656: __ne__
6666: __gt__
6676: __ge__
6686: __iter__
6696: __mod__
6706: __rmod__
6716: __len__
6726: __getitem__
6736: __add__
6746: __mul__
6756: __rmul__
6766: __contains__
6786: __getnewargs__
6796: capitalize
6806: center
6816: count
6826: decode
6836: endswith
6846: expandtabs
6856: find
6866: fromhex
6876: hex
6886: index
6896: isalnum
6906: isalpha
6916: isascii
6926: isdigit
6936: islower
6946: isspace
6956: istitle
6966: isupper
6976: join
6986: ljust
6996: lower
7006: lstrip
7026: partition
7036: replace
7046: removeprefix
7056: removesuffix
7066: rfind
7076: rindex
7086: rjust
7096: rpartition
7106: rsplit
7116: rstrip
7126: split
7136: splitlines
7146: startswith
7168: strip
7178: swapcase
7188: title
7198: translate
7208: upper
7218: zfill
7238: __repr__
7248: __getattribute__
7258: __lt__
7268: __le__
7278: __eq__
7288: __ne__
7298: __gt__
7308: __ge__
7318: __iter__
7328: __init__
7338: __len__
7348: __reversed__
7358: __setitem__
7368: __delitem__
7378: __add__
7388: __mul__
7398: __rmul__
7408: __contains__
7418: __iadd__
7428: __imul__
7448: __getitem__
7458: __sizeof__
7468: clear
7478: copy
7488: append
7498: insert
7508: extend
7518: pop
7528: remove
7538: index
7548: count
7558: reverse
7568: sort
7578: __class_getitem__
7598: __repr__
7608: __bool__
7638: __repr__
7648: __bool__
7802: cb
7863: _weakref
7925: built-in
8058: __qualname__
8122: staticmethod
8337:     %s [--user-base] [--user-site]

    Without arguments print some useful information
    With arguments print the value of USER_BASE and/or USER_SITE separated
    by '%s'.

    Exit codes with --user-base or --user-site:
      0 - user site directory is enabled
      1 - user site directory is disabled by user
      2 - user site directory is disabled by super user
          or for security reasons
     >2 - unknown error
    
8339: sys.path = [
8340:     %r,
8341: ]
8342: USER_BASE: %r (%s)
8343: exists
8344: doesn't exist
8345: USER_SITE: %r (%s)
8346: ENABLE_USER_SITE: %r
8348: --user-base
8349: --user-site
8384: os
8385: fspath
8386: isinstance
8387: bytes
8388: startswith
8389: _get_sep
8390: find
8391: len
8392: environ
8393: pwd
8394: getpwuid
8395: getuid
8396: pw_dir
8397: KeyError
8398: str
8399: getpwnam
8400: fsencode
8401: rstrip
8576: path
8577: _os
8578: listdir
8579: getcwd
8580: FileNotFoundError
8581: PermissionError
8582: NotADirectoryError
8583: sys
8584: platform
8585: startswith
8586: set
8587: _path_cache
8588: partition
8589: format
8590: lower
8591: add
8592: _CASE_INSENSITIVE_PLATFORMS
8593: _relaxed_path_cache
8624: _bootstrap
8625: sys
8626: _imp
8627: modules
8628: __name__
8629: all
8630: _builtin_from_name
8631: ImportError
8632: setattr
8633: join
8634: append
8635: _make_relax_case
8636: EXTENSION_SUFFIXES
8637: extend
8638: extension_suffixes
8639: SOURCE_SUFFIXES
8640: WindowsRegistryFinder
8641: DEBUG_BUILD
8648: _bootstrap_external
8649: _classify_pyc
8650: ImportError
8651: _imp
8652: check_hash_based_pycs
8653: _get_pyc_source
8654: source_hash
8655: _RAW_MAGIC_NUMBER
8656: _validate_hash_pyc
8657: _get_mtime_and_size_of_source
8658: _eq_mtime
8659: _unpack_uint32
8660: _bootstrap
8661: _verbose_message
8662: marshal
8663: loads
8664: isinstance
8665: _code_type
8666: TypeError
8690: punct
8704: __reduce__
8724: __getattribute__
8744: __dir__
8764: __repr__
8774: __getattribute__
8784: __get__
8794: __init__
8824: __repr__
8834: __hash__
8844: __getattribute__
8854: __lt__
8864: __le__
8874: __eq__
8884: __ne__
8894: __gt__
8904: __ge__
8914: __iter__
8924: __bool__
8934: __len__
8944: __getitem__
8954: __contains__
8974: __reversed__
8984: __reduce__
8994: count
9004: index
9024: __repr__
9034: __getattribute__
9044: __lt__
9054: __le__
9064: __eq__
9074: __ne__
9084: __gt__
9094: __ge__
9104: __iter__
9114: __init__
9124: __or__
9134: __ror__
9144: __ior__
9154: __len__
9164: __sizeof__
9174: __setitem__
9184: __delitem__
9194: __getitem__
9293: never
9294: always
9298: bytecode is stale for 
9299: compiled module 
9300:  is not a code object
9306: _thread
9307: get_ident
9308: _blocking_on
9309: lock
9310: count
9311: owner
9312: has_deadlock
9313: _DeadlockError
9314: wakeup
9315: acquire
9316: waiters
9317: release
9378: path
9379: debug_override
9380: optimization
9381: message
9382: head
9383: tail
9384: base
9385: sep
9386: rest
9387: tag
9388: almost_filename
9389: filename
9396: __spec__
9397: AttributeError
9398: __name__
9399: __loader__
9400: __file__
9401: _ORIGIN
9402: __cached__
9403: list
9404: __path__
9405: ModuleSpec
9406: _set_fileattr
9407: cached
9408: submodule_search_locations
9486: sys
9487: meta_path
9488: ImportError
9489: _warnings
9490: warn
9491: ImportWarning
9492: modules
9493: _ImportLockContext
9494: find_spec
9495: AttributeError
9496: _find_spec_legacy
9497: __spec__
9544: Simple substitute for functools.update_wrapper.
9545: _wrap
9548: _frozen_importlib
9550: _wrap
9563: _new_module
9566: _frozen_importlib
9568: _new_module
9580: Get or create the module lock for a given module name.

    Acquire/release internally the global import lock to protect
    _module_locks.
9581: _get_module_lock
9584: _frozen_importlib
9586: _get_module_lock
9599: __init__
9602: _frozen_importlib
9604: _ModuleLock.__init__
9617: has_deadlock
9620: _frozen_importlib
9622: _ModuleLock.has_deadlock
9634: 
        Acquire the module lock.  If a potential deadlock is detected,
        a _DeadlockError is raised.
        Otherwise, the lock is always acquired and True is returned.
        
9635: acquire
9638: _frozen_importlib
9640: _ModuleLock.acquire
9653: release
9656: _frozen_importlib
9658: _ModuleLock.release
9671: __repr__
9674: _frozen_importlib
9676: _ModuleLock.__repr__
9689: __init__
9692: _frozen_importlib
9694: _DummyModuleLock.__init__
9707: acquire
9710: _frozen_importlib
9712: _DummyModuleLock.acquire
